/*
 * This source file was generated by the Gradle 'init' task
 */
package org.cards;

import java.util.Random;
import java.util.Arrays;

public class Shuffler {
    public Integer[] badShuffle(Integer[] cards) {
        Integer[] copy = new Integer[cards.length];
        int idx = 0;
        while(idx < cards.length) {
            int randPos = new Random().nextInt(cards.length);
            int randElt = cards[randPos];
            Boolean contains = Arrays.asList(copy).contains(randElt);
            if (!contains) {
                copy[idx] = randElt;
                idx++;
            }
        }
        return copy;
    }

    public Integer[] betterShuffle(Integer[] cards) {
        Integer[] copy = new Integer[cards.length];
        int idx = 0;
        int logicalSize = cards.length;
        while(idx < cards.length) {
            int randPos = new Random().nextInt(logicalSize);
            int randElt = cards[randPos];
            copy[idx] = randElt;
            for(int i = randPos; i < logicalSize - 1; i++) {
                cards[i] = cards[i+1];
            }
            logicalSize--;
            idx++;
        }
        return copy;
    }

    public Integer[] bestShuffle(Integer[] cards) {
        int last_pos = cards.length-1;
        while(last_pos > 0) {
            int last_elt = cards[last_pos];
            int randPos = new Random().nextInt(last_pos+1);
            int randElt = cards[randPos];
            cards[last_pos] = randElt;
            cards[randPos] = last_elt;
            last_pos--;
        }
        return cards;
    }


    public static void main(String[] args) {

        Integer[] deck = {1,2,3,4,5};
        Shuffler shuffler = new Shuffler();
        Integer[] newdeck = shuffler.bestShuffle(deck);
        System.out.println(Arrays.toString(newdeck));
    }
}
